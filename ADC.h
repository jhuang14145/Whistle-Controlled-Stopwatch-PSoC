//*****************************************************************************
//*****************************************************************************
//  FILENAME: ADC.h
//  Version: 1.20, Updated on 2015/3/4 at 22:21:26
//	Generated by PSoC Designer 5.4.3191
//
//  DESCRIPTION:  C declarations for the ADCINC User Module with
//                a 1st-order modulator.
//-----------------------------------------------------------------------------
//      Copyright (c) Cypress Semiconductor 2015. All Rights Reserved.
//*****************************************************************************
//*****************************************************************************
#ifndef ADC_INCLUDE
#define ADC_INCLUDE

#include <m8c.h>

#pragma fastcall16 ADC_Start
#pragma fastcall16 ADC_SetPower
#pragma fastcall16 ADC_Stop
#pragma fastcall16 ADC_GetSamples
#pragma fastcall16 ADC_StopADC
#pragma fastcall16 ADC_fIsDataAvailable
#pragma fastcall16 ADC_iClearFlagGetData
#pragma fastcall16 ADC_wClearFlagGetData
#pragma fastcall16 ADC_cClearFlagGetData
#pragma fastcall16 ADC_bClearFlagGetData
#pragma fastcall16 ADC_iGetData
#pragma fastcall16 ADC_wGetData
#pragma fastcall16 ADC_cGetData
#pragma fastcall16 ADC_bGetData
#pragma fastcall16 ADC_fClearFlag
#pragma fastcall16 ADC_WritePulseWidth

//-------------------------------------------------
// Prototypes of the ADC API.
//-------------------------------------------------
extern void  ADC_Start(BYTE bPower);
extern void  ADC_SetPower(BYTE bPower);
extern void  ADC_Stop(void);
extern void  ADC_GetSamples(BYTE bNumSamples);
extern void  ADC_StopADC(void);
extern BYTE  ADC_fIsDataAvailable(void);
extern INT   ADC_iClearFlagGetData(void);
extern WORD  ADC_wClearFlagGetData(void);
extern CHAR  ADC_cClearFlagGetData(void);
extern BYTE  ADC_bClearFlagGetData(void);
extern INT   ADC_iGetData(void);
extern WORD  ADC_wGetData(void);
extern CHAR  ADC_cGetData(void);
extern BYTE  ADC_bGetData(void);
extern BYTE  ADC_fClearFlag(void);
extern void  ADC_WritePulseWidth(BYTE bPulseWidthValue);

//-------------------------------------------------
// Defines for ADC API's.
//-------------------------------------------------
#define ADC_OFF         0
#define ADC_LOWPOWER    1
#define ADC_MEDPOWER    2
#define ADC_HIGHPOWER   3


//-------------------------------------------------
// Hardware Register Definitions
//-------------------------------------------------
#pragma ioport  ADC_PWMdr0: 0x02c                 //Period reg
BYTE            ADC_PWMdr0;
#pragma ioport  ADC_PWMdr1: 0x02d                 //1_ADDRh   ; Down count reg
BYTE            ADC_PWMdr1;               
#pragma ioport  ADC_PWMdr2: 0x02e                 //Compare reg
BYTE            ADC_PWMdr2;
#pragma ioport  ADC_PWMcr0: 0x02f                 //Control reg
BYTE            ADC_PWMcr0;
#pragma ioport  ADC_PWMfn:  0x12c                 //Function reg
BYTE            ADC_PWMfn;
#pragma ioport  ADC_PWMsl:  0x12d                 //Input select reg
BYTE            ADC_PWMsl;
#pragma ioport  ADC_PWMos:  0x12e                 //Output select reg
BYTE            ADC_PWMos;
#pragma ioport  ADC_AtoDcr0:    0x080                //SC Block Control Reg 0
BYTE            ADC_AtoDcr0;
#pragma ioport  ADC_AtoDcr1:    0x081                //SC Block Control Reg 1
BYTE            ADC_AtoDcr1;
#pragma ioport  ADC_AtoDcr2:    0x082                //SC Block Control Reg 2
BYTE            ADC_AtoDcr2;
#pragma ioport  ADC_AtoDcr3:    0x083                //SC Block Control Reg 3
BYTE            ADC_AtoDcr3;

#endif
// end of file ADC.h
